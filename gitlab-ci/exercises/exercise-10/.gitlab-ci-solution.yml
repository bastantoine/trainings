stages:
  - prepare
  - test
  - code quality
  - build
  - deploy

default:
  image: python:3.11

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

.rule only merge requests: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_OPEN_MERGE_REQUESTS

.only merge requests:
  rules:
    - if: !reference [".rule only merge requests"]

.optional only merge requests:
  extends: .only merge requests
  allow_failure: true

.deploy:
  stage: deploy
  script:
    - echo "Deploying to $ENVIRONMENT"
    - echo "Using credentials $DEPLOY_USER with token $DEPLOY_TOKEN"

.python cache:
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - .cache/pip

.python cache pull only:
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - .cache/pip
    policy: pull

prepare dependencies:
  stage: prepare
  extends: ".python cache"
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt

unit tests:
  stage: test
  extends:
    - ".only merge requests"
    - ".python cache pull only"
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install pytest-cov
    - pytest --junitxml=report.xml --cov --cov-report term --cov-report xml:coverage.xml
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

generate swagger:
  stage: test
  variables:
    FLASK_APP: "accounting.app:setup_app"
  extends:
    - ".only merge requests"
    - ".python cache pull only"
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - flask swagger > swagger.json
  artifacts:
    paths:
      - swagger.json
    expire_in: 10min

tests cli:
  stage: test
  extends: ".only merge requests"
  parallel:
    matrix:
      - VERSION:
          - "3.9"
          - "3.10"
          - "3.11"
        OS:
          - buster
          - bullseye
          - alpine3.17
          - alpine3.18
  image: python:${VERSION}-${OS}
  script:
    - python3 cli.py

code lint:
  stage: code quality
  extends:
    - ".optional only merge requests"
    - ".python cache pull only"
  script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install flake8
    - flake8 accounting

swagger lint:
  stage: code quality
  dependencies:
    - generate swagger
  image:
    name: stoplight/spectral
    entrypoint: [""]
  extends: ".optional only merge requests"
  script:
    - spectral lint swagger.json -f stylish -f junit --output.junit report.xml
  artifacts:
    reports:
      junit: report.xml

build docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  extends: ".optional only merge requests"
  rules:
    - if: !reference [".rule only merge requests"]
      variables:
        DOCKER_PUSH: "--no-push"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "deploy/dev"
    - if: $CI_COMMIT_BRANCH == "deploy/rct"
    - if: $CI_COMMIT_BRANCH == "deploy/prod"
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
      $DOCKER_PUSH

deploy dev:
  extends: .deploy
  variables:
    ENVIRONMENT: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy/dev"

deploy rct:
  extends: .deploy
  variables:
    ENVIRONMENT: rct
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy/rct"

deploy prd:
  extends: .deploy
  variables:
    ENVIRONMENT: prd
  rules:
    - if: $CI_COMMIT_BRANCH == "deploy/prd"
      when: manual
